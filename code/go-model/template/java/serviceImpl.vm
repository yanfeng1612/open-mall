{{if eq .config.Auto true}}
package {{.config.PackageName}}.service.impl.auto;
{{else}}
package {{.config.PackageName}}.service.impl;
{{end}}

import java.math.BigDecimal;
import java.util.List;
import java.util.Date;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import com.alibaba.fastjson.JSON;
import org.springframework.dao.DuplicateKeyException;

import {{.config.PackageName}}.utils.*;
{{if eq .config.Auto true}}
import {{.config.PackageName}}.domain.auto.{{.backendObject.JavaBeanName}};
import {{.config.PackageName}}.domain.auto.{{.backendObject.JavaBeanName}}Query;
import {{.config.PackageName}}.manager.auto.{{.backendObject.JavaBeanName}}Manager;
import {{.config.PackageName}}.service.auto.{{.backendObject.JavaBeanName}}Service;
{{else}}
import {{.config.PackageName}}.domain.{{.backendObject.JavaBeanName}};
import {{.config.PackageName}}.domain.{{.backendObject.JavaBeanName}}Query;
import {{.config.PackageName}}.manager.{{.backendObject.JavaBeanName}}Manager;
import {{.config.PackageName}}.service.{{.backendObject.JavaBeanName}}Service;
{{end}}

/**
 * {{.backendObject.Comment}}
 * @author {{.author}}
 * @date {{.date}}
 **/
@Service("{{.backendObject.JavaBeanNameLower}}Service")
public class {{.backendObject.JavaBeanName}}ServiceImpl implements {{.backendObject.JavaBeanName}}Service{

    private final static Logger LOG = LoggerFactory.getLogger({{.backendObject.JavaBeanName}}ServiceImpl.class);

    @Autowired
    private {{.backendObject.JavaBeanName}}Manager {{.backendObject.JavaBeanNameLower}}ManagerImpl;

    /**
     *
     * @generated
     */
    @Override
    public BasicResult add{{.backendObject.JavaBeanName}}({{.backendObject.JavaBeanName}} {{.backendObject.JavaBeanNameLower}}) {
        LOG.info("request {{.backendObject.JavaBeanName}}ServiceImpl.add{{.backendObject.JavaBeanName}} param:" + JSON.toJSONString({{.backendObject.JavaBeanNameLower}}));
        BasicResult result = new BasicResult();
        try {
            if ({{.backendObject.JavaBeanNameLower}} != null) {
                {{.backendObject.JavaBeanNameLower}}ManagerImpl.insert{{.backendObject.JavaBeanName}}({{.backendObject.JavaBeanNameLower}});
                result.setCode(CodeEnum.SUCCESS.getCode());
                result.setMsg("保存成功");
            } else {
                result.setCode(CodeEnum.FAILED.getCode());
                result.setMsg("{{.backendObject.JavaBeanNameLower}} is null");
                LOG.error("------{{.backendObject.JavaBeanName}}ServiceImpl.add{{.backendObject.JavaBeanName}} - {{.backendObject.JavaBeanNameLower}} is null!");
            }
        } catch (DuplicateKeyException e) {
            result.setCode(CodeEnum.DUPLICATE.getCode());
            result.setMsg(CodeEnum.DUPLICATE.getMessage());
            LOG.error("------{{.backendObject.JavaBeanName}}ServiceImpl.add{{.backendObject.JavaBeanName}} 异常",e);
        } catch (Exception e) {
            result.setCode(CodeEnum.FAILED.getCode());
            result.setMsg("未知异常" + e.getMessage());
            LOG.error("------{{.backendObject.JavaBeanName}}ServiceImpl.add{{.backendObject.JavaBeanName}} 异常",e);
        }
        return result;
    }

    /**
     *
     * @generated
     */
    @Override
    public BasicResult addBatch(List<{{.backendObject.JavaBeanName}}> {{.backendObject.JavaBeanNameLower}}List){
        LOG.info("request {{.backendObject.JavaBeanName}}ServiceImpl.addBatch size:" + {{.backendObject.JavaBeanNameLower}}List.size());
        BasicResult result = new BasicResult();
        try {
            {{.backendObject.JavaBeanNameLower}}ManagerImpl.insertBatch({{.backendObject.JavaBeanNameLower}}List);
            result.setCode(CodeEnum.SUCCESS.getCode());
            result.setMsg("批量插入成功");
        } catch (DuplicateKeyException e) {
            result.setCode(CodeEnum.DUPLICATE.getCode());
            result.setMsg(CodeEnum.DUPLICATE.getMessage());
            LOG.error("------{{.backendObject.JavaBeanNameLower}}ServiceImpl.addBatch 异常",e);
        } catch (Exception e) {
            result.setCode(CodeEnum.FAILED.getCode());
            result.setMsg("未知异常" + e.getMessage());
            LOG.error("exception {{.backendObject.JavaBeanName}}ServiceImpl.addBatch param:" + JSON.toJSONString({{.backendObject.JavaBeanNameLower}}List),e);
        }
        return result;
    }

    /**
     *
     * @generated
     */
    @Override
    public BasicResult addOrUpdate({{.backendObject.JavaBeanName}} {{.backendObject.JavaBeanNameLower}}) {
        LOG.info("request {{.backendObject.JavaBeanName}}ServiceImpl.addOrUpdate param:" + JSON.toJSONString({{.backendObject.JavaBeanNameLower}}));
        BasicResult result = new BasicResult();
        try {
            if ({{.backendObject.JavaBeanNameLower}} != null) {
                {{.backendObject.JavaBeanNameLower}}ManagerImpl.insertOrUpdate({{.backendObject.JavaBeanNameLower}});
                result.setCode(CodeEnum.SUCCESS.getCode());
                result.setMsg("保存成功");
            } else {
                result.setCode(CodeEnum.FAILED.getCode());
                result.setMsg("{{.backendObject.JavaBeanNameLower}} is null");
                LOG.error("------{{.backendObject.JavaBeanName}}ServiceImpl.add{{.backendObject.JavaBeanName}} - {{.backendObject.JavaBeanNameLower}} is null!");
            }
        } catch (DuplicateKeyException e) {
            result.setCode(CodeEnum.DUPLICATE.getCode());
            result.setMsg(CodeEnum.DUPLICATE.getMessage());
            LOG.error("------{{.backendObject.JavaBeanName}}ServiceImpl.add{{.backendObject.JavaBeanName}} 异常",e);
        } catch (Exception e) {
            result.setCode(CodeEnum.FAILED.getCode());
            result.setMsg("未知异常" + e.getMessage());
            LOG.error("------{{.backendObject.JavaBeanName}}ServiceImpl.add{{.backendObject.JavaBeanName}} 异常",e);
        }
        return result;
    }

    /**
     *
     * @generated
     */
    @Override
    public BasicResult deleteById(long id){
        LOG.info("request {{.backendObject.JavaBeanName}}ServiceImpl.deleteBy param:{}",id);
        BasicResult result = new BasicResult();
        try{
            int num = {{.backendObject.JavaBeanNameLower}}ManagerImpl.deleteById(id);
            if (num == 1) {
                result.setMsg("删除成功");
                result.setCode(CodeEnum.SUCCESS.getCode());
            } else {
                result.setMsg("删除失败");
                result.setCode(CodeEnum.FAILED.getCode());
            }
        } catch (Exception e){
            result.setCode(CodeEnum.FAILED.getCode());
            result.setMsg("未知异常" + e.getMessage());
            LOG.error("exception {{.backendObject.JavaBeanName}}ServiceImpl.deleteById :{}",id,e);
        }
        return result;
    }

    /**
     *
     * @generated
     */
    @Override
    public BasicResult update{{.backendObject.JavaBeanName}}ById({{.backendObject.JavaBeanName}} {{.backendObject.JavaBeanNameLower}}){
        LOG.info("request {{.backendObject.JavaBeanName}}ServiceImpl.modify{{.backendObject.JavaBeanName}} param:" + JSON.toJSONString({{.backendObject.JavaBeanNameLower}}));
        BasicResult result = new BasicResult();
        try {
            if ({{.backendObject.JavaBeanNameLower}} != null) {
                int update = {{.backendObject.JavaBeanNameLower}}ManagerImpl.update{{.backendObject.JavaBeanName}}({{.backendObject.JavaBeanNameLower}});
                if (update > 0) {
                    result.setCode(CodeEnum.SUCCESS.getCode());
                    result.setMsg("编辑成功");
                    LOG.debug("------{{.backendObject.JavaBeanName}}ServiceImpl.modify{{.backendObject.JavaBeanName}} 编辑成功------");
                } else {
                    result.setCode(CodeEnum.FAILED.getCode());
                    result.setMsg("编辑失败，请检查是否指定主键，或者唯一键");
                    LOG.debug("------{{.backendObject.JavaBeanName}}ServiceImpl.modify{{.backendObject.JavaBeanName}} 编辑失败------");
                }
            } else {
                result.setCode(CodeEnum.FAILED.getCode());
                result.setMsg("{{.backendObject.JavaBeanNameLower}} is null");
                LOG.error("------{{.backendObject.JavaBeanName}}ServiceImpl.modify{{.backendObject.JavaBeanName}} - {{.backendObject.JavaBeanNameLower}} is null!");
            }
        } catch (DuplicateKeyException e) {
            result.setCode(CodeEnum.DUPLICATE.getCode());
            result.setMsg(CodeEnum.DUPLICATE.getMessage());
            LOG.error("------{{.backendObject.JavaBeanName}}ServiceImpl.modify{{.backendObject.JavaBeanName}} 异常",e);
        } catch (Exception e) {
            LOG.error("------{{.backendObject.JavaBeanName}}ServiceImpl.modify{{.backendObject.JavaBeanName}} 异常",e);
            result.setCode(CodeEnum.FAILED.getCode());
            result.setMsg("未知异常" + e.getMessage());
        }
        return result;
    }

    /**
     *
     * @generated
     */
    @Override
    public BasicResult updateBatch(List<{{.backendObject.JavaBeanName}}> {{.backendObject.JavaBeanNameLower}}List){
        LOG.info("request {{.backendObject.JavaBeanName}}ServiceImpl.modifyBatch size:" + {{.backendObject.JavaBeanNameLower}}List.size());
        BasicResult result = new BasicResult();
        try {
            Object count = {{.backendObject.JavaBeanNameLower}}ManagerImpl.updateBatch({{.backendObject.JavaBeanNameLower}}List);
            result.setCode(CodeEnum.SUCCESS.getCode());
            result.setMsg(String.valueOf(count));
            LOG.info("response {{.backendObject.JavaBeanName}}ServiceImpl.modifyBatch 处理成功 updateCount:" + count);
        } catch (Exception e) {
            result.setCode(CodeEnum.FAILED.getCode());
            result.setMsg("未知异常" + e.getMessage());
            LOG.error("exception {{.backendObject.JavaBeanName}}ServiceImpl.modifyBatch :" + JSON.toJSONString({{.backendObject.JavaBeanNameLower}}List),e);
        }
        return result;
    }

    /**
     *
     * @generated
     */
    @Override
    public {{.backendObject.JavaBeanName}} search{{.backendObject.JavaBeanName}}ById(Long id){
        try {
            return {{.backendObject.JavaBeanNameLower}}ManagerImpl.findById(id);
        } catch (Exception e) {
            LOG.error("------{{.backendObject.JavaBeanName}}ServiceImpl.search{{.backendObject.JavaBeanName}}ByPriKey 异常", e);
        }
        return null;
    }

    /**
     *
     * @generated
     */
    @Override
    public ListResult<{{.backendObject.JavaBeanName}}> search{{.backendObject.JavaBeanName}}(Query<{{.backendObject.JavaBeanName}}Query> query){
        LOG.info("request {{.backendObject.JavaBeanName}}ServiceImpl.search{{.backendObject.JavaBeanName}} param:" + JSON.toJSONString(query));
        ListResult<{{.backendObject.JavaBeanName}}> result = new ListResult<>();
        try {
            result = {{.backendObject.JavaBeanNameLower}}ManagerImpl.search{{.backendObject.JavaBeanName}}List(query);
            result.setCode(CodeEnum.SUCCESS.getCode());
            result.setMsg("成功");
        } catch (Exception e) {
            result.setCode(CodeEnum.FAILED.getCode());
            result.setMsg("未知异常" + e.getMessage());
            LOG.error("------{{.backendObject.JavaBeanName}}ServiceImpl.search{{.backendObject.JavaBeanName}} 异常", e);
        }
        return result;
    }

    /**
     *
     * @generated
     */
    @Override
    public PageListResult<{{.backendObject.JavaBeanName}}> searchPage{{.backendObject.JavaBeanName}}(PageQuery<{{.backendObject.JavaBeanName}}Query> pageQuery){
        LOG.info("request {{.backendObject.JavaBeanName}}ServiceImpl.searchPage{{.backendObject.JavaBeanName}} param:" + JSON.toJSONString(pageQuery));
        PageListResult<{{.backendObject.JavaBeanName}}> result = new PageListResult<{{.backendObject.JavaBeanName}}>();
        try {
            result = {{.backendObject.JavaBeanNameLower}}ManagerImpl.searchPage{{.backendObject.JavaBeanName}}List(pageQuery);
            result.setMsg("查询成功");
            result.setCode(CodeEnum.SUCCESS.getCode());
            LOG.info("result {{.backendObject.JavaBeanName}}ServiceImpl.searchPage{{.backendObject.JavaBeanName}} 处理结果:" + JSON.toJSONString(result));
        } catch (Exception e) {
            result.setCode(CodeEnum.FAILED.getCode());
            result.setMsg("未知异常" + e.getMessage());
            LOG.error("exception {{.backendObject.JavaBeanName}}ServiceImpl.searchPage{{.backendObject.JavaBeanName}} :" + JSON.toJSONString(pageQuery),e);
        }
        return result;
    }

    /**
    *
    * @generated
    */
    @Override
    public ListResult<{{.backendObject.JavaBeanName}}> searchPage{{.backendObject.JavaBeanName}}ById(IdPageQuery<{{.backendObject.JavaBeanName}}Query> idPageQuery){
        LOG.info("request {{.backendObject.JavaBeanName}}ServiceImpl.searchPage{{.backendObject.JavaBeanName}}ById param:" + JSON.toJSONString(idPageQuery));
        ListResult<{{.backendObject.JavaBeanName}}> result = new ListResult<>();
        try {
            result = {{.backendObject.JavaBeanNameLower}}ManagerImpl.searchPage{{.backendObject.JavaBeanName}}ListById(idPageQuery);
            result.setCode(CodeEnum.SUCCESS.getCode());
            result.setMsg("成功");
        } catch (Exception e) {
            result.setCode(CodeEnum.FAILED.getCode());
            result.setMsg("未知异常" + e.getMessage());
            LOG.error("exception {{.backendObject.JavaBeanName}}ServiceImpl.searchPage{{.backendObject.JavaBeanName}}ById :" + JSON.toJSONString(idPageQuery),e);
        }
        return result;
    }

    /**
     *
     * @generated
     */
    @Override
    public GenericResult<Long> getTotalCount(Query<{{.backendObject.JavaBeanName}}Query> query){
        LOG.info("request {{.backendObject.JavaBeanName}}ServiceImpl.getTotalCount param:" + JSON.toJSONString(query));
        GenericResult<Long> result = new GenericResult<>();
        try{
            result = {{.backendObject.JavaBeanNameLower}}ManagerImpl.getTotalCount(query);
            result.setMsg("查询成功");
            result.setCode(CodeEnum.SUCCESS.getCode());
            LOG.info("response {{.backendObject.JavaBeanName}}ServiceImpl.getTotalCount 处理成功" + JSON.toJSONString(result));
        } catch (Exception e){
            result.setCode(CodeEnum.FAILED.getCode());
            result.setMsg("未知异常" + e.getMessage());
            LOG.error("exception {{.backendObject.JavaBeanName}}ServiceImpl.getTotalCount param:" + JSON.toJSONString(query),e);
        }
        return result;
    }

    /**
     *
     * @generated
     */
    @Override
    public GenericResult<Long> getCount(PageQuery<{{.backendObject.JavaBeanName}}Query> pageQuery){
        LOG.info("request {{.backendObject.JavaBeanName}}ServiceImpl.getCount param:" + JSON.toJSONString(pageQuery));
        GenericResult<Long> result = new GenericResult<>();
        try{
            result = {{.backendObject.JavaBeanNameLower}}ManagerImpl.getCount(pageQuery);
            result.setMsg("查询成功");
            result.setCode(CodeEnum.SUCCESS.getCode());
            LOG.info("response {{.backendObject.JavaBeanName}}ServiceImpl.getCount 处理结果:");
        } catch (Exception e){
            result.setCode(CodeEnum.FAILED.getCode());
            result.setMsg("未知异常" + e.getMessage());
            LOG.error("exception {{.backendObject.JavaBeanName}}ServiceImpl.getCount param:" + JSON.toJSONString(pageQuery),e);
        }
        return result;
    }

    {{range $i,$field := .backendObject.Columns}}
    {{if eq $field.SingleQuery 1}}
    /**
    *
    * @generated
    */
    @Override
    public {{.backendObject.JavaBeanName}} search{{.backendObject.JavaBeanName}}By${field.JavaFieldNameUF}(String ${field.fieldName}#if($shardingField && $shardingField.fieldName != $field.fieldName), ${shardingField.showType} ${shardingField.fieldName}#end) {
        try {
            return {{.backendObject.JavaBeanNameLower}}ManagerImpl.search{{.backendObject.JavaBeanName}}By${field.JavaFieldNameUF}(${field.fieldName}#if($shardingField && $shardingField.fieldName != $field.fieldName), ${shardingField.fieldName}#end);
        } catch (Exception e) {
            LOG.error("------{{.backendObject.JavaBeanName}}ServiceImpl.search{{.backendObject.JavaBeanName}}By${field.JavaFieldNameUF} 异常", e);
        }
        return null;
    }
    {{end}}
    {{end}}

    {{range $i,$field := .backendObject.Columns}}
    {{if eq $field.SingleQuery 1}}
        /**
         *
         * @generated
         */
        @Override
        public BasicResult update{{.backendObject.JavaBeanName}}By${field.JavaFieldNameUF}({{.backendObject.JavaBeanName}} {{.backendObject.JavaBeanNameLower}}) {
            LOG.info("request {{.backendObject.JavaBeanName}}ServiceImpl.update{{.backendObject.JavaBeanName}}By${field.JavaFieldNameUF} param:" + JSON.toJSONString({{.backendObject.JavaBeanNameLower}}));
            BasicResult result = new BasicResult();
            try {
                if ({{.backendObject.JavaBeanNameLower}} != null) {
                    int update = {{.backendObject.JavaBeanNameLower}}ManagerImpl.update{{.backendObject.JavaBeanName}}By${field.JavaFieldNameUF}({{.backendObject.JavaBeanNameLower}});
                    if (update > 0) {
                        result.setCode(CodeEnum.SUCCESS.getCode());
                        result.setMsg("编辑成功");
                        LOG.debug("------{{.backendObject.JavaBeanName}}ServiceImpl.update{{.backendObject.JavaBeanName}}By${field.JavaFieldNameUF} 编辑成功------");
                    } else {
                        result.setCode(CodeEnum.FAILED.getCode());
                        result.setMsg("编辑失败，请检查是否指定主键，或者唯一键");
                        LOG.debug("------{{.backendObject.JavaBeanName}}ServiceImpl.update{{.backendObject.JavaBeanName}}By${field.JavaFieldNameUF} 编辑失败------");
                    }
                } else {
                    result.setCode(CodeEnum.FAILED.getCode());
                    result.setMsg("{{.backendObject.JavaBeanNameLower}} is null");
                    LOG.error("------{{.backendObject.JavaBeanName}}ServiceImpl.modify{{.backendObject.JavaBeanName}}ByUuid - {{.backendObject.JavaBeanNameLower}} is null!");
                }
            } catch (Exception e) {
                LOG.error("------{{.backendObject.JavaBeanName}}ServiceImpl.modify{{.backendObject.JavaBeanName}}ByUuid 异常",e);
                result.setCode(CodeEnum.FAILED.getCode());
                result.setMsg("未知异常" + e.getMessage());
            }
            return result;
        }
    {{end}}
    {{end}}

}
