{{if eq .config.Auto true}}
package {{.config.PackageName}}.controller.auto;
{{else}}
package {{.config.PackageName}}.controller;
{{end}}

import java.util.Date;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RestController;

import com.alibaba.fastjson.JSON;

import {{.config.PackageName}}.utils.*;

{{if eq .config.Auto true}}
import {{.config.PackageName}}.domain.auto.{{.backendObject.JavaBeanName}};
import {{.config.PackageName}}.domain.auto.{{.backendObject.JavaBeanName}}Query;
import {{.config.PackageName}}.service.auto.{{.backendObject.JavaBeanName}}Service;
{{else}}
import {{.config.PackageName}}.domain.{{.backendObject.JavaBeanName}};
import {{.config.PackageName}}.domain.{{.backendObject.JavaBeanName}}Query;
import {{.config.PackageName}}.service.{{.backendObject.JavaBeanName}}Service;
{{end}}

/**
 * {{.backendObject.Comment}}
 * @author {{.author}}
 * @date {{.date}}
 **/
@RestController
@RequestMapping(value = "/{{.backendObject.JavaBeanNameLower}}", produces = "application/json; charset=utf-8")
public class {{.backendObject.JavaBeanName}}Controller {

    private static final Logger LOG = LoggerFactory.getLogger({{.backendObject.JavaBeanName}}Controller.class);

    @Autowired
    private {{.backendObject.JavaBeanName}}Service {{.backendObject.JavaBeanNameLower}}Service;

    @RequestMapping(value = "/add")
    public Response<{{.backendObject.JavaBeanName}}> add(@RequestBody {{.backendObject.JavaBeanName}} {{.backendObject.JavaBeanNameLower}}) {
        Response<{{.backendObject.JavaBeanName}}> response = new Response<>();
        try {
            BasicResult result = {{.backendObject.JavaBeanNameLower}}Service.add{{.backendObject.JavaBeanName}}({{.backendObject.JavaBeanNameLower}});
            APIMsgCode apiMsgCode = CodeConverter.convert(result.getCode());
            return ResponseTemplate.getResponse(apiMsgCode, null);
        } catch (Exception e) {
            response.setCode(APIMsgCode.FAILURE.getCode());
            response.setMessage(APIMsgCode.FAILURE.getValue());
            response.setStatus(APIEmRequestStatus.FAIL);
        }
        return response;
    }

    @RequestMapping(value = "/deleteById")
    public Response<{{.backendObject.JavaBeanName}}> deleteById(Long id) {
        Response<{{.backendObject.JavaBeanName}}> response = new Response<>();
        try {
            BasicResult result = {{.backendObject.JavaBeanNameLower}}Service.deleteById(id);
            APIMsgCode apiMsgCode = CodeConverter.convert(result.getCode());
            return ResponseTemplate.getResponse(apiMsgCode, null);
        } catch (Exception e) {
            response.setCode(APIMsgCode.FAILURE.getCode());
            response.setMessage(APIMsgCode.FAILURE.getValue());
            response.setStatus(APIEmRequestStatus.FAIL);
        }
        return response;
    }

    @RequestMapping(value = "/updateById")
    public Response<{{.backendObject.JavaBeanName}}> updateById(@RequestBody {{.backendObject.JavaBeanName}} {{.backendObject.JavaBeanNameLower}}) {
        Response<{{.backendObject.JavaBeanName}}> response = new Response<>();
        try {
            BasicResult result = {{.backendObject.JavaBeanNameLower}}Service.update{{.backendObject.JavaBeanName}}ById({{.backendObject.JavaBeanNameLower}});
            APIMsgCode apiMsgCode = CodeConverter.convert(result.getCode());
            return ResponseTemplate.getResponse(apiMsgCode, null);
        } catch (Exception e) {
            response.setCode(APIMsgCode.FAILURE.getCode());
            response.setMessage(APIMsgCode.FAILURE.getValue());
            response.setStatus(APIEmRequestStatus.FAIL);
        }
        return response;
    }

    @RequestMapping(value = "/addOrUpdate")
    public Response<{{.backendObject.JavaBeanName}}> addOrUpdate(@RequestBody {{.backendObject.JavaBeanName}} {{.backendObject.JavaBeanNameLower}}) {
        Response<{{.backendObject.JavaBeanName}}> response = new Response<>();
        try {
            BasicResult result = {{.backendObject.JavaBeanNameLower}}Service.addOrUpdate({{.backendObject.JavaBeanNameLower}});
            APIMsgCode apiMsgCode = CodeConverter.convert(result.getCode());
            return ResponseTemplate.getResponse(apiMsgCode, null);
        } catch (Exception e) {
            response.setCode(APIMsgCode.FAILURE.getCode());
            response.setMessage(APIMsgCode.FAILURE.getValue());
            response.setStatus(APIEmRequestStatus.FAIL);
        }
        return response;
    }

    /**
     * 查询数据列表
     */
    @RequestMapping("/list")
    public Response<PageListResult> list(@RequestBody PageQuery<{{.backendObject.JavaBeanName}}Query> query) {
        try {
            LOG.info("分页查询数据参数信息req: {}", JSON.toJSONString(query));
            PageListResult<{{.backendObject.JavaBeanName}}> pageListResult = {{.backendObject.JavaBeanNameLower}}Service.searchPage{{.backendObject.JavaBeanName}}(query);
            LOG.info("分页查询数据参数信息resp: {}-{}", pageListResult.getCode(), JSON.toJSONString(pageListResult.getPagenation()));
            APIMsgCode apiMsgCode = CodeConverter.convert(pageListResult.getCode());
            return ResponseTemplate.getResponse(apiMsgCode, pageListResult);
        } catch (Exception e) {
            LOG.error("分页查询数据参数信息exception: ", e);
        }
        return ResponseTemplate.FAILURE.getResponse(null);
    }

    /**
     * 查询数据详情
     */
    @RequestMapping(value = "/detail", method = {RequestMethod.POST,RequestMethod.GET})
    public Response<{{.backendObject.JavaBeanName}}> get{{.backendObject.JavaBeanName}}ById(Long id) {
        LOG.info("查询参数 {}",id) ;
        Response<{{.backendObject.JavaBeanName}}> response = new Response<>();
        try {
            {{.backendObject.JavaBeanName}} result = {{.backendObject.JavaBeanNameLower}}Service.search{{.backendObject.JavaBeanName}}ById(id);
            return ResponseTemplate.getResponse(APIMsgCode.SUCCESS, result);
        } catch (Exception e) {
            LOG.error("查询数据异常:{}",id,e);
            response = ResponseTemplate.FAILURE.getResponse(null);
        }
        return response;
    }

}
